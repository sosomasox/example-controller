/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/sosomasox/example-controller/apis/example/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HogeLister helps list Hoges.
// All objects returned here must be treated as read-only.
type HogeLister interface {
	// List lists all Hoges in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hoge, err error)
	// Hoges returns an object that can list and get Hoges.
	Hoges(namespace string) HogeNamespaceLister
	HogeListerExpansion
}

// hogeLister implements the HogeLister interface.
type hogeLister struct {
	indexer cache.Indexer
}

// NewHogeLister returns a new HogeLister.
func NewHogeLister(indexer cache.Indexer) HogeLister {
	return &hogeLister{indexer: indexer}
}

// List lists all Hoges in the indexer.
func (s *hogeLister) List(selector labels.Selector) (ret []*v1alpha1.Hoge, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hoge))
	})
	return ret, err
}

// Hoges returns an object that can list and get Hoges.
func (s *hogeLister) Hoges(namespace string) HogeNamespaceLister {
	return hogeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HogeNamespaceLister helps list and get Hoges.
// All objects returned here must be treated as read-only.
type HogeNamespaceLister interface {
	// List lists all Hoges in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Hoge, err error)
	// Get retrieves the Hoge from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Hoge, error)
	HogeNamespaceListerExpansion
}

// hogeNamespaceLister implements the HogeNamespaceLister
// interface.
type hogeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hoges in the indexer for a given namespace.
func (s hogeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Hoge, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hoge))
	})
	return ret, err
}

// Get retrieves the Hoge from the indexer for a given namespace and name.
func (s hogeNamespaceLister) Get(name string) (*v1alpha1.Hoge, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hoge"), name)
	}
	return obj.(*v1alpha1.Hoge), nil
}
